---
  name: "development-live"
  on: 
    workflow_dispatch: {}
    push: 
      branches: 
        - "development"
      paths-ignore: 
        - ".github/workflows/fito-deploy-*.yml"
        - "**/*.md"
  concurrency: 
    group: "${{ github.workflow }}-${{ github.ref }}"
    cancel-in-progress: false
  env: 
    SSH_USER: "${{ secrets.FITO_ENV_CONNECTION_USER }}"
    SSH_KEY: "${{ secrets.FITO_ENV_CONNECTION_PRIVATE_KEY }}"
    SSH_HOST: "${{ secrets.FITO_ENV_CONNECTION_HOST }}"
    ATTEMPTS: "${{ github.run_number }}"
  jobs: 
    install-dependencies: 
      name: "install dependencies"
      runs-on: "ubuntu-latest"
      steps: 
        - 
          name: "Checkout under $GITHUB_WORKSPACE"
          uses: "actions/checkout@main"
          with: 
            ref: "development"
        - 
          name: "Set up NodeJS"
          uses: "actions/setup-node@v4"
          with: 
            node-version: "18.19"
        - 
          name: "Install yarn"
          run: "npm install -g yarn"
        - 
          name: "Install dependencies"
          run: "yarn install"
        - 
          name: "Cache"
          uses: "actions/cache@v4"
          with: 
            path: "./*"
            key: "${{ github.sha }}-cache"
    build-application: 
      name: "build application"
      runs-on: "ubuntu-latest"
      needs: "install-dependencies"
      steps: 
        - 
          name: "Cache"
          uses: "actions/cache@v4"
          with: 
            path: "./*"
            key: "${{ github.sha }}-cache"
        - 
          name: "Set up NodeJS"
          uses: "actions/setup-node@v4"
          with: 
            node-version: "18.19"
        - 
          name: "Build application"
          run: "yarn build"
        - 
          name: "Cache"
          uses: "actions/cache@v4"
          with: 
            path: "./*\nbuild\nnode_modules\npackage.json\nstatic"
            key: "${{ github.sha }}-cache"
    create-and-push-docker-image: 
      name: "create and push docker image"
      runs-on: "ubuntu-latest"
      needs: "build-application"
      steps: 
        - 
          name: "Cache"
          uses: "actions/cache@v4"
          with: 
            path: "./*\nbuild\nnode_modules\npackage.json\nstatic"
            key: "${{ github.sha }}-cache"
        - 
          name: "Build docker image"
          run: "docker build . --file Dockerfile --build-arg API_DIMASLZ_URL=\"${{secrets.FITO_ENV_API_DIMASLZ_URL}}\" -t ${{ env.ATTEMPTS }}_${{ github.sha }}_dev-cv.dimaslz.dev_development_image"
        - 
          name: "prepare connection"
          run: "mkdir -p ~/.ssh/\necho \"$SSH_KEY\" > ~/.ssh/prod.key\nchmod 600 ~/.ssh/prod.key\ncat >>~/.ssh/config <<END\nHost prod\n  HostName $SSH_HOST\n  User $SSH_USER\n  IdentityFile ~/.ssh/prod.key\n  StrictHostKeyChecking no\nEND"
        - 
          name: "Cache"
          uses: "actions/cache@v4"
          with: 
            path: "./*\nbuild\nnode_modules\npackage.json\nstatic"
            key: "${{ github.sha }}-cache"
        - 
          name: "Push image"
          run: "docker save ${{ env.ATTEMPTS }}_${{ github.sha }}_dev-cv.dimaslz.dev_development_image | bzip2 | ssh prod 'docker load'"
    deployment: 
      name: "run image and clean"
      runs-on: "ubuntu-latest"
      needs: "create-and-push-docker-image"
      environment: 
        name: "development"
        url: "https://dev-cv.dimaslz.dev"
      steps: 
        - 
          name: "Cache"
          uses: "actions/cache@v4"
          with: 
            path: "./*\nbuild\nnode_modules\npackage.json\nstatic"
            key: "${{ github.sha }}-cache"
        - 
          name: "prepare connection"
          run: "mkdir -p ~/.ssh/\necho \"$SSH_KEY\" > ~/.ssh/prod.key\nchmod 600 ~/.ssh/prod.key\ncat >>~/.ssh/config <<END\nHost prod\n  HostName $SSH_HOST\n  User $SSH_USER\n  IdentityFile ~/.ssh/prod.key\n  StrictHostKeyChecking no\nEND"
        - 
          name: "get current currentContainerId"
          run: "currentContainerId=`ssh prod \"docker ps --format=\\\"{{.Names}} {{.ID}}\\\" | grep \\\"_dev-cv.dimaslz.dev\\\" || echo \\\"\\\"\"` && currentContainerId=`echo $currentContainerId | grep -Po \"\\s.*?$\" | tr -d \"\\n\" || echo \"\"` && echo \"currentContainerId=$currentContainerId\" >> $GITHUB_ENV"
        - 
          name: "get current currentImageId"
          run: "currentImageId=`ssh prod \"docker images --format=\\\"{{.Repository}} {{.ID}}\\\" | grep \\\"_dev-cv.dimaslz.dev\\\" || echo \\\"\\\"\"` && currentImageId=`echo $currentImageId | grep -Po \"\\s(.*?$)\" | tr -d \"\\n\" || echo \"\"` && echo \"currentImageId=$currentImageId\" >> $GITHUB_ENV"
        - 
          name: "run"
          run: "newContainerID=`ssh prod \"docker run --restart=always --name ${{ env.ATTEMPTS }}_${{ github.sha }}_dev-cv.dimaslz.dev_development_container -e API_DIMASLZ_URL=\\\"${{secrets.FITO_ENV_API_DIMASLZ_URL}}\\\" -d ${{ env.ATTEMPTS }}_${{ github.sha }}_dev-cv.dimaslz.dev_development_image\"` && echo \"newContainerID=$newContainerID\" >> $GITHUB_ENV"
        - 
          name: "get container IP"
          run: "newContainerIP=`ssh prod \"docker inspect -f \\\"{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}\\\" ${{ env.newContainerID }}\"` && echo \"newContainerIP=$newContainerIP\" >> $GITHUB_ENV"
        - 
          name: "get container PORT"
          run: "newContainerPort=`ssh prod \"docker container ls | grep \\\"${{ env.ATTEMPTS }}_${{ github.sha }}_dev-cv.dimaslz.dev_development\\\" | grep -Po \\\"\\d+/tcp \\\" | grep -Po \\\"\\d+\\\"\"` && echo \"newContainerPort=$newContainerPort\" >> $GITHUB_ENV"
        - 
          name: "Container is not running"
          if: "${{ failure() }}"
          run: "echo \"container is not running\" && exit 1"
        - 
          name: "setup nginx config"
          run: "wget https://statics.dimaslz.dev/fito/nginx/static-config.nginx.tmpl -O nginx.tmpl\n\texport SERVER_NAME=\"dev-cv.dimaslz.dev\"\n\texport SERVER_URL=\"http://${{ env.newContainerIP }}:${{ env.newContainerPort }}\"\n\tenvsubst < nginx.tmpl > dev-cv.dimaslz.dev\n\tscp dev-cv.dimaslz.dev prod:/etc/nginx/sites-enabled/dev-cv.dimaslz.dev\n\tssh prod \"nginx -t && systemctl restart nginx\""
        - 
          name: "Container is not running"
          if: "${{ failure() }}"
          run: "echo \"container is not running\" && ssh prod \"docker rm -f ${{ env.newContainerID }}\" && exit 1"
